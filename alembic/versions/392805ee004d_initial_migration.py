"""Initial migration

Revision ID: 392805ee004d
Revises:
Create Date: 2025-08-02 06:43:08.406292

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "392805ee004d"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("folder_permissions")
    op.drop_index(op.f("ix_links_token"), table_name="links")
    op.drop_table("links")
    op.drop_table("folders")
    op.drop_table("file_permissions")
    op.drop_table("files")
    op.drop_table("users")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("password", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="users_pkey"),
        sa.UniqueConstraint(
            "email",
            name="users_email_key",
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "files",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("folder_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("file", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "mime_type", sa.VARCHAR(length=55), autoincrement=False, nullable=False
        ),
        sa.Column("ext", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("size", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("starred", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["folder_id"],
            ["folders.id"],
            name="files_folder_id_fkey",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="files_pkey"),
        sa.UniqueConstraint(
            "name",
            "folder_id",
            name="uq_name_parent",
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "file_permissions",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("file_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "role",
            postgresql.ENUM("owner", "editor", "viewer", name="roleenum"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["file_id"],
            ["files.id"],
            name=op.f("file_permissions_file_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("file_permissions_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("file_permissions_pkey")),
        sa.UniqueConstraint(
            "user_id",
            "role",
            "file_id",
            name=op.f("uq_user_file_role"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_table(
        "folders",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("parent_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("starred", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["folders.id"],
            name="folders_parent_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="folders_pkey"),
        sa.UniqueConstraint(
            "name",
            "parent_id",
            name="uq_folder_name_parent",
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "links",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("token", sa.VARCHAR(length=48), autoincrement=False, nullable=False),
        sa.Column("file_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("folder_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "permisssion",
            postgresql.ENUM("edit", "view", name="linkpermission"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("password", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "expires_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["file_id"],
            ["files.id"],
            name=op.f("links_file_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["folder_id"],
            ["folders.id"],
            name=op.f("links_folder_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("links_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("links_pkey")),
    )
    op.create_index(op.f("ix_links_token"), "links", ["token"], unique=True)
    op.create_table(
        "folder_permissions",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("folder_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "role",
            postgresql.ENUM("owner", "editor", "viewer", name="roleenum"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["folder_id"],
            ["folders.id"],
            name=op.f("folder_permissions_folder_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("folder_permissions_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("folder_permissions_pkey")),
        sa.UniqueConstraint(
            "user_id",
            "folder_id",
            "role",
            name=op.f("uq_user_folder_role"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    # ### end Alembic commands ###
